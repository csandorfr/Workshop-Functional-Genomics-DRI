install.packages("network", contriburl="http://bojan.3e.pl/R/hacks")
library("network")
net_gene<-as.data.frame(unique(c(as.character(info_gene_pln_sub[,1]),as.character(info_gene_pln_sub[,2]))))
net_links<-info_gene_pln_sub
colnames(net_gene)[1]<-"id"
colnames(net_links)[2]<-"to"
colnames(net_links)[1]<-"from"
colnames(net_links)[4]<-"dataset"
net <- graph_from_data_frame(d=net_links, vertices=net_gene, directed=F)
library(igraph)
net_gene<-as.data.frame(unique(c(as.character(info_gene_pln_sub[,1]),as.character(info_gene_pln_sub[,2]))))
net_links<-info_gene_pln_sub
colnames(net_gene)[1]<-"id"
colnames(net_links)[2]<-"to"
colnames(net_links)[1]<-"from"
colnames(net_links)[4]<-"dataset"
net <- graph_from_data_frame(d=net_links, vertices=net_gene, directed=F)
ig <- graph.full(10)
netg <- as.network(ig)
detach("package:network", unload=TRUE)
install.packages("network", contriburl="http://bojan.3e.pl/R/hacks")
install.packages("network", contriburl = "http://bojan.3e.pl/R/hacks")
detach("package:igraph", unload=TRUE)
library("network", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("network")
install.packages("network", contriburl = "http://bojan.3e.pl/R/hacks")
install.packages("network", contriburl = "http://bojan.3e.pl/R/hacks")
library(network)
install.packages("network", contriburl = "http://bojan.3e.pl/R/hacks")
library(network)
install.packages("network")
library(network)
library("intergraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
ig <- graph.full(10)
netg <- as.network(ig)
ig
asNetwork(ig)
net_gene<-as.data.frame(unique(c(as.character(info_gene_pln_sub[,1]),as.character(info_gene_pln_sub[,2]))))
net_links<-info_gene_pln_sub
colnames(net_gene)[1]<-"id"
colnames(net_links)[2]<-"to"
colnames(net_links)[1]<-"from"
colnames(net_links)[4]<-"dataset"
net <- graph_from_data_frame(d=net_links, vertices=net_gene, directed=F)
library(igraph)
net_gene<-as.data.frame(unique(c(as.character(info_gene_pln_sub[,1]),as.character(info_gene_pln_sub[,2]))))
net_links<-info_gene_pln_sub
colnames(net_gene)[1]<-"id"
colnames(net_links)[2]<-"to"
colnames(net_links)[1]<-"from"
colnames(net_links)[4]<-"dataset"
net <- graph_from_data_frame(d=net_links, vertices=net_gene, directed=F)
net2<-asNetwork(net)
net2
ggnet2(net2)
library(GGally)
ggnet2(net2)
p<-ggnet2(net2)
p
net2
p<-ggnet2(net2,size=weight)
p<-ggnet2(net2,size="weight")
p
p<-ggnet2(net2,label=TRUE)
p
net2
p<-ggnet2(net2,label=TRUE,color="dataset")
p
RColorBrewer::brewer.pal(9, "Set1")[ c(3, 1, 9, 6, 8, 5, 2) ]
net_gene
net2
p<-ggnet2(net2,label=TRUE,color=Color)
p<-ggnet2(net2,label=TRUE,color="Color")
p
p<-ggnet2(net2,label=TRUE,edge.color="Color")
p<-ggnet2(net2,label=TRUE,edge.color="Color")
p<-ggnet2(net2,label=TRUE,color="Color")
p
p<-ggnet2(net2,label=TRUE,color="blue")
p
p<-ggnet2(net2,label=TRUE,edge.color="blue")
p
net2$mel
p<-ggnet2(net2,label=TRUE,edge.color="Color")
p<-ggnet2(net2,label=TRUE,edge.color="Dataset")
net2
p<-ggnet2(net2,label=TRUE,edge.color="dataset")
p<-ggnet2(net2,label=TRUE)
p
p+geom_edges(aes(color = dataset),alpha = 0.25,curvature = 0.05)
ggplot(ggnetwork(net2, arrow.gap = 0.02, layout = "fruchtermanreingold"))
library(ggplot2)
ggplot(ggnetwork(net2, arrow.gap = 0.02, layout = "fruchtermanreingold"))
install.packages(ggnetwork)
install.packages("ggnetwork")
install.packages(ggnetwork)
install.packages("ggnetwork")
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("ggnetwork")
library("ggnetwork", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(ggplot2)
ggplot(ggnetwork(net2, arrow.gap = 0.02, layout = "fruchtermanreingold"))
ggplot(ggnetwork(net2, arrow.gap = 0.02, layout = "fruchtermanreingold"))
net2
head(ggnetwork(net2))
ggplot(ggnetwork(net2))
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(linetype = type), color = "grey50") +
theme_blank()
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "grey50") +
theme_blank()
ggplot(net, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black") +
geom_nodes(color = "grey50") +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold", cell.jitter = 0.75), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black") +
geom_nodes(color = "grey50") +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black") +
geom_nodes(color = "grey50") +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black") +
geom_nodes(color = "grey50",size=1) +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black",curvature = 0.1) +
geom_nodes(color = "grey50",size=1) +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black",curvature = 0.1) +
geom_nodes(color = "grey50",size=8) +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges( color = "black",curvature = 0.1) +
geom_nodes(color = "grey50",size=8) +
geom_nodetext(aes(label = vertex.names),fontface = "bold") +
theme_blank()
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color = dataset),curvature = 0.1) +
geom_nodes(color = "grey50",size=8) +
geom_nodetext(aes(label = vertex.names),fontface = "bold") +
theme_blank()
head(info_gene_pln_sub)
list_all_gene<-unique(as.character(info_gene_pln_sub$source),as.character(info_gene_pln_sub$target))
list_all_gene
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='ensembl_gene_id', values =list_all_gene, mart = ensembl)
dim(query_ensembl)
length(list_all_gene)
head(query_ensembl)
table(list_all_gene)
list_all_gene<-unique(c(as.character(info_gene_pln_sub$source),as.character(info_gene_pln_sub$target)))
list_all_gene
table(list_all_gene)
length(list_all_gene)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='ensembl_gene_id', values =list_all_gene, mart = ensembl)
dim(query_ensembl)
head(query_ensembl)
query_ensembl$target<-query_ensembl
head(query_ensembl)
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='ensembl_gene_id', values =list_all_gene, mart = ensembl)
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='ensembl_gene_id', values =list_all_gene, mart = ensembl)
head(query_ensembl)
query_ensembl$source<-query_ensembl$ensembl_gene_id
query_ensembl$target<-query_ensembl$target
head(query_ensembl)
query_ensembl$source<-query_ensembl$ensembl_gene_id
query_ensembl$target<-query_ensembl$ensembl_gene_id
head(query_ensembl)
info_gene_pln_sub2<-merge(info_gene_pln_sub,query_ensembl,by=c("source","target"))
dim(info_gene_pln_sub)
dim(info_gene_pln_sub2)
info_gene_pln_sub2<-merge(info_gene_pln_sub,query_ensembl,by=c("source"))
dim(info_gene_pln_sub2)
info_gene_pln_sub3<-merge(info_gene_pln_sub2,query_ensembl,by=c("target"))
head(info_gene_pln_sub2)
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='ensembl_gene_id', values =list_all_gene, mart = ensembl)
query_ensembl$source<-query_ensembl$ensembl_gene_id
info_gene_pln_sub2<-merge(info_gene_pln_sub,query_ensembl,by=c("source"))
head(info_gene_pln_sub2)
query_ensembl$target<-query_ensembl$ensembl_gene_id
info_gene_pln_sub3<-merge(info_gene_pln_sub2,query_ensembl,by=c("target"))
head(info_gene_pln_sub3)
rm(info_pln_ind)
for (i in c(1:dim(info_dataset)[1])) {
file<-paste(dir_data,"/",info_dataset$File[i],sep="")
info_temp<-read.table(file,h=F)
index_gene<-which(info_temp$V1 %in% list_gene_ens & info_temp$V2 %in% list_gene_ens)
info_temp<-info_temp[index_gene,]
info_temp$Type<-info_dataset$Type[i]
if (!exists("info_pln_ind")) {
info_pln_ind<-info_temp
}
else{
info_pln_ind<-rbind(info_pln_ind,info_temp)
}
}
# get dataset
list_dataset_info<-sapply(c(1:dim(info_gene_pln_sub)[1]),get_max_info_link,info_gene_pln=info_gene_pln_sub,info_pln_ind=info_pln_ind)
info_gene_pln_sub$dataset<-list_dataset_info
head(info_gene_pln_sub)
dim(info_gene_pln_sub)
head(info_gene_pln)
head(info_pln_ind)
dim(info_pln_ind)
list_dataset_info<-sapply(c(1:dim(info_gene_pln_sub)[1]),get_max_info_link,info_gene_pln=info_gene_pln_sub,info_pln_ind=info_pln_ind)
list_dataset_info
head(info_gene_pln_sub)
# get info links dataset
info_dataset<-read.table(f_list_dataset,h=F)
colnames(info_dataset)<-c("File","Type")
# sub network
index_gene<-which(info_gene_pln$V1 %in% list_gene_ens & info_gene_pln$V2 %in% list_gene_ens)
info_gene_pln_sub<-info_gene_pln[index_gene,]
# get individual dataset
rm(info_pln_ind)
for (i in c(1:dim(info_dataset)[1])) {
file<-paste(dir_data,"/",info_dataset$File[i],sep="")
info_temp<-read.table(file,h=F)
index_gene<-which(info_temp$V1 %in% list_gene_ens & info_temp$V2 %in% list_gene_ens)
info_temp<-info_temp[index_gene,]
info_temp$Type<-info_dataset$Type[i]
if (!exists("info_pln_ind")) {
info_pln_ind<-info_temp
}
else{
info_pln_ind<-rbind(info_pln_ind,info_temp)
}
}
# get dataset
list_dataset_info<-sapply(c(1:dim(info_gene_pln_sub)[1]),get_max_info_link,info_gene_pln=info_gene_pln_sub,info_pln_ind=info_pln_ind)
info_gene_pln_sub$dataset<-list_dataset_info
list_dataset_info
head(info_gene_pln_sub)
list_all_gene<-unique(c(as.character(info_gene_pln_sub$V1),as.character(info_gene_pln_sub$V2)))
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='ensembl_gene_id', values =list_all_gene, mart = ensembl)
dim(query_ensembl)
length(list_all_gene)
head(query_ensembl)
colnames(query_ensembl)[1]<-"V1"
info_gene_pln_sub2<-merge(info_gene_pln_sub,query_ensembl,by=c("V1"))
hea(info_gene_pln_sub2)
head(info_gene_pln_sub2)
colnames(query_ensembl)[1]<-"V2"
info_gene_pln_sub3<-merge(info_gene_pln_sub2,query_ensembl,by=c("V2"))
head(info_gene_pln_sub3)
info_gene_pln_sub<-info_gene_pln_sub3[,c(5,6,3,4)]
head(info_gene_pln_sub)
table(info_gene_pln_sub$dataset)
rm(info_gene_pln_sub2,info_gene_pln_sub3)
colnames(info_gene_pln_sub)<-c("source","target","weight","dataset")
net_gene<-as.data.frame(unique(c(as.character(info_gene_pln_sub[,1]),as.character(info_gene_pln_sub[,2]))))
net_links<-info_gene_pln_sub
colnames(net_gene)[1]<-"id"
colnames(net_links)[2]<-"to"
colnames(net_links)[1]<-"from"
colnames(net_links)[4]<-"dataset"
net <- graph_from_data_frame(d=net_links, vertices=net_gene, directed=F)
net2<-asNetwork(net)
ggplot(ggnetwork(net,layout = "fruchtermanreingold"), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(aes(color = dataset),curvature = 0.1) +
geom_nodes(color = "grey50",size=8) +
geom_nodetext(aes(label = vertex.names),fontface = "bold") +
theme_blank()
head(net)
head(net_links)
table(net_links$dataset)
source('get_info_links_network.R')
getwd()
setwd('/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/src/Rscripts/clustering_analysis')
source('get_info_links_network.R')
f_list_dataset="/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/example_new/list_file_rescore_wl_info_wl.general"
dir_data<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/example_new"
source('get_info_links_network.R')
info_gene_pln_sub<-get_info_links_network(f_list_dataset,dir_data,list_gene_ens)
head(info_gene_pln_sub)
source("make_network.R")
p_net<-make_network(info_gene_pln_sub)
p_net<-make_network(info_gene_pln_sub)
source('make_network.R')
info_gene_pln_sub<-get_info_links_network(f_list_dataset,dir_data,list_gene_ens)
p_net<-make_network(info_gene_pln_sub)
p_net
source('multiplot.R')
p_clustering<-plot_clustering(clustering)
p<-multiplot(p_clustering,p_net,cols=1)
p<-multiplot(p_clustering,p_net,cols=2)
install.packages("gridExtra")
library("gridExtra")
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = cbind(c(1,2), c(1,1,1)))
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = cbind(c(2,1), c(1,1)))
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = cbind(c(1,2), c(1,1)))
cbind(c(1,1,1), c(2,3,4)
)
cbind(c(1,2), c(1,1))
cbind(c(1,1,1), c(1,1,1))
rbind(c(1,1,1), c(1,1,1))
rbind(c(1,1,2), c(1,1,2))
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = rbind(c(1,1,2), c(1,1,2)))
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = rbind(c(1,2,2), c(1,2,2)))
rbind(c(1,2,2), c(1,2,2)
)
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = rbind(c(1,2,2), c(2,2,2)))
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = rbind(c(1,2,2), c(0,2,2)))
grid.arrange(p_clustering,p_net,  ncol = 2,
layout_matrix = rbind(c(1,2,2), c(1,2,2)))
grid.arrange(p_clustering,p_net,  ncol = 3,
layout_matrix = rbind(c(1,2,2,2), c(1,2,2,2)))
p_empty<-ggplot() + theme_void()
p_empty
grid.arrange(p_clustering,p_empty,p_net,  ncol = 3,
layout_matrix = rbind(c(1,3,3,3), c(2,3,3,3)))
p_final<-grid.arrange(p_clustering,p_empty,p_net,  ncol = 3,layout_matrix = rbind(c(1,3,3,3), c(2,3,3,3)))
p_final
p_final<-grid.arrange(p_clustering,p_empty,p_net,  ncol = 3,layout_matrix = rbind(c(1,3,3,3), c(2,3,3,3)))
rm(list = ls())
setwd('/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/src/Rscripts/clustering_analysis')
suppressMessages(library(biomaRt))
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
source('generate_background.R')
source('compute_clustering.R')
source('plot_clustering.R')
source('get_info_links_network.R')
source('make_network.R')
nb_gene<-100
nb_links<-1000000
f_size<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/others/hs_68_cds_max_mean_length"
f_pln<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/example_new/wl_general.final.scale.ord"
f_gene<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/example_new/list_gene_symbol"
nb_sim<-100
f_list_dataset="/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/example_new/list_file_rescore_wl_info_wl.general"
dir_data<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/data/example_new"
# get list of genes
gene<-read.table(f_gene,header=FALSE)
# convert gene symbol to ensembl gene
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
query_ensembl<-getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), filters ='hgnc_symbol', values =gene$V1, mart = ensembl)
list_gene_ens<-unique(query_ensembl$ensembl_gene_id)
df_background<-generate_background(f_size,info_gene_pln,nb_links,nb_gene,list_gene_ens)
info_gene_pln<-read.table(f_pln,h=F,nrows = nb_links)
# generate the background
df_background<-generate_background(f_size,info_gene_pln,nb_links,nb_gene,list_gene_ens)
clustering<-compute_clustering(df_background,info_gene_pln,nb_sim,nb_gene)
# plot clustering
p_clustering<-plot_clustering(clustering)
# get info dataset subnetwork
info_gene_pln_sub<-get_info_links_network(f_list_dataset,dir_data,list_gene_ens)
# get info links network
p_net<-make_network(info_gene_pln_sub)
# network representation
p_empty<-ggplot() + theme_void()
dir_work<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/test"
setwd(dir_work)
url<-"https://drive.google.com/open?id=1wDFoldeFf8JjiWRhc2IjEtKhZ0nVtFwp"
download.file(url)
download.file(url,destfile=paste(dir_work,destfile="/pln.tar.gz",sep=""))
dir_work<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/test"
untar(paste(dir_work,"/pln.tar","",sep=""))
f_gene<-paste(dir_work,"",list_gene_symbol)
head(f_gene)
f_gene<-paste(dir_work,"",list_gene_symbol)
f_gene<-paste(dir_work,"",list_gene_symbol,sep="")
f_gene
f_gene<-paste(dir_work,"/pln/",list_gene_symbol,sep="")
f_gene<-paste(dir_work,"/pln/list_gene_symbol"",sep="")
f_gene<-paste(dir_work,"/pln/list_gene_symbol",sep="")
list_gene<-read.table(f_gene,h=F)
DT::datatable(list_gene, rownames = TRUE, caption = "List of genes", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
install.packages("DT")
library(DT)
f_gene<-paste(dir_work,"/pln/list_gene_symbol",sep="")
list_gene<-read.table(f_gene,h=F)
DT::datatable(list_gene, rownames = TRUE, caption = "List of genes", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
countLines(f_gene)
install.packages("R.utils")
library(R.utils)
countLines(f_gene)
class(countLines(f_gene))
as.numeric(countLines(f_gene))
parameters<-list()
parameters[["nb_gene"]]<-100
parameters[["nb_links"]]<-1000000
parameters[["f_size"]]<-paste(dir_work,"/pln/hs_68_cds_max_mean_length",sep="")
parameters[["f_pln"]]<-paste(dir_work,"/pln/wl_general.final.scale.ord",sep="")
parameters[["f_gene"]]<-f_gene
parameters[["nb_sim"]]<-nb_sim
parameters[["f_list_dataset"]]<-paste(dir_work,"/pln/list_file_rescore_wl_info_wl.general",sep="")
parameters[["dir_data"]]<-dir_work
parameters
unlist(parameters)
unlist(parameters)[c(1:5)]
unlist(parameters)[1]
unlist(parameters)[2]
df<-data.frame("Parameter"=names(unlist(parameters)),"Value"=value(unlist(parameters)))
df<-data.frame("Parameter"=names(unlist(parameters)),"Value"=unlist(parameters))
head(df)
dim(df)
df[1,]
df[2,]
df[3,]
df_parameters<-data.frame("Parameter"=names(unlist(parameters)),"Value"=unlist(parameters))
parameters<-list()
parameters[["nb_gene"]]<-100
parameters[["nb_links"]]<-1000000
parameters[["f_size"]]<-paste(dir_work,"/pln/hs_68_cds_max_mean_length",sep="")
parameters[["f_pln"]]<-paste(dir_work,"/pln/wl_general.final.scale.ord",sep="")
parameters[["f_gene"]]<-f_gene
parameters[["nb_sim"]]<-nb_sim
parameters[["f_list_dataset"]]<-paste(dir_work,"/pln/list_file_rescore_wl_info_wl.general",sep="")
parameters[["dir_data"]]<-dir_work
df_parameters<-data.frame("Parameter"=names(unlist(parameters)),"Value"=unlist(parameters))
DT::datatable(list_gene, rownames = TRUE, caption = "List of genes", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type")
info_dataset$Number<-sapply(parameters[["f_list_dataset"]]$File,countLines)
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type")
info_dataset$Number<-sapply(info_dataset$File,countLines)
info_dataset$File
sapply(as.character(info_dataset$File),countLines)
sapply(as.character(info_dataset$File),countLines)
info_dataset$File[1]
countLines(info_dataset$File[1])
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type")
setwd(parameters["dir_data"])
info_dataset$Number<-sapply(as.character(info_dataset$File),countLines)
getwd()
dir_data
parameters[["dir_data"]]<-paste(dir_work,"/pln",sep="")
parameters[["dir_data"]]
# get info links dataset
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type")
setwd(parameters[["dir_data"]])
info_dataset$Number<-sapply(as.character(info_dataset$File),countLines)
head(info_dataset$Number)
info_dataset<-rbind(c("wl_general.final.scale.ord","PLN",countLines(parameters[["pln"]])))
parameters[["pln"]]
info_dataset<-rbind(c("wl_general.final.scale.ord","PLN",countLines(parameters[["f_pln"]])))
head(info_dataset)
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type")
setwd(parameters[["dir_data"]])
info_dataset$Coverage<-sapply(as.character(info_dataset$File),countLines)
head(info_dataset)
add_line<-c("wl_general.final.scale.ord","PLN",countLines(parameters[["f_pln"]])
)
add_line
df<-info_dataset
df
add_line[3]<-as.numeric(add_line[3])
add_line
add_line[3]<-int(add_line[3])
add_line[3]<-integer(add_line[3])
add_line
DT::datatable(info_dataset, rownames = TRUE, caption = "List of dataset", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
write.table(info_dataset,file=parameters[["f_list_dataset"]],quote=FALSE,row.names=FALSE,col.names=FALSE,sep="\t")
# get info links dataset
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type","Coverage")
DT::datatable(info_dataset, rownames = TRUE, caption = "List of dataset", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
dir_pln<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/src/Rscripts/clustering_analysis"
source("functional_clustering_analysis.R")
setwd(dir_pln)
source("functional_clustering_analysis.R")
dir_pln
source("functional_clustering_analysis_p.R")
functional_clustering_analysis(parameters)
dir_pln
ls()
rm(list = ls())
dir_work<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/test"
dir_pln<-"/Users/dpag0499/OneDrive - Cardiff University/Documents/PROJECTS/PLN_Demo_Workshop/src/Rscripts/clustering_analysis"
f_gene<-paste(dir_work,"/pln/list_gene_symbol",sep="")
list_gene<-read.table(f_gene,h=F)
DT::datatable(list_gene, rownames = TRUE, caption = "List of genes", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
parameters<-list()
parameters[["nb_gene"]]<-100
parameters[["nb_links"]]<-1000000
parameters[["f_size"]]<-paste(dir_work,"/pln/hs_68_cds_max_mean_length",sep="")
parameters[["f_pln"]]<-paste(dir_work,"/pln/wl_general.final.scale.ord",sep="")
parameters[["f_gene"]]<-f_gene
parameters[["nb_sim"]]<-100
parameters[["f_list_dataset"]]<-paste(dir_work,"/pln/list_file_rescore_wl_info_wl.general",sep="")
parameters[["dir_data"]]<-paste(dir_work,"/pln",sep="")
df_parameters<-data.frame("Parameter"=names(unlist(parameters)),"Value"=unlist(parameters))
DT::datatable(list_gene, rownames = TRUE, caption = "List of genes", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
# get info links dataset
info_dataset<-read.table(parameters[["f_list_dataset"]],h=F)
colnames(info_dataset)<-c("File","Type","Coverage")
DT::datatable(info_dataset, rownames = TRUE, caption = "List of dataset", escape = FALSE, extensions = 'Buttons', options = list(dom = 'ftipr'))
setwd(dir_pln)
source("functional_clustering_analysis_p.R")
functional_clustering_analysis(parameters)
functional_clustering_analysis(parameters)
